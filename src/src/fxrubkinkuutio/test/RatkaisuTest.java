package fxrubkinkuutio.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import fxrubkinkuutio.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2024.04.29 17:37:01 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class RatkaisuTest {



  // Generated by ComTest BEGIN
  /** testRekisteroi105 */
  @Test
  public void testRekisteroi105() {    // Ratkaisu: 105
    Ratkaisu eka = new Ratkaisu(); 
    assertEquals("From: Ratkaisu line: 107", 1, eka.getId()); 
    eka.rekisteroi(); 
    Ratkaisu toka = new Ratkaisu(); 
    toka.rekisteroi(); 
    int n1 = eka.getId(); 
    int n2 = toka.getId(); 
    assertEquals("From: Ratkaisu line: 113", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetAika159 */
  @Test
  public void testGetAika159() {    // Ratkaisu: 159
    Ratkaisu eka = new Ratkaisu(); 
    eka.testiArvot(); 
    assertEquals("From: Ratkaisu line: 162", "00;24,284", eka.getAika()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString225 */
  @Test
  public void testToString225() {    // Ratkaisu: 225
    Ratkaisu ratkaisu = new Ratkaisu(); 
    ratkaisu.parse("2|00;34,224|02.11.2023|00.03"); 
    assertEquals("From: Ratkaisu line: 228", true, ratkaisu.toString().startsWith("2|00;34,224|02.11.2023|00.03|"));  // on enemmäkin kuin 3 kenttää, siksi loppu |
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAseta253 */
  @Test
  public void testAseta253() {    // Ratkaisu: 253
    Ratkaisu ratkaisu = new Ratkaisu(); 
    Rekisteri rekisteri = null; 
    assertEquals("From: Ratkaisu line: 256", null, ratkaisu.aseta(1,"00;24,443", rekisteri)); 
    { String _l_=ratkaisu.aseta(2,"2.3.2023", rekisteri),_r_="Päivämäärän tulee olla muotoa '00.00.0000'"; if ( !_l_.matches(_r_) ) fail("From: Ratkaisu line: 257" + " does not match: ["+ _l_ + "] != [" + _r_ + "]");}
    assertEquals("From: Ratkaisu line: 258", null, ratkaisu.aseta(2,"04.07.2024", rekisteri)); 
    assertEquals("From: Ratkaisu line: 259", null, ratkaisu.aseta(3,"02.24", rekisteri)); 
    assertEquals("From: Ratkaisu line: 260", "DNF tulee olla muotoa 'T' tai 'F'", ratkaisu.aseta(4,"", rekisteri)); 
    { String _l_=ratkaisu.aseta(6,"4", rekisteri),_r_=" "; if ( !_l_.matches(_r_) ) fail("From: Ratkaisu line: 261" + " does not match: ["+ _l_ + "] != [" + _r_ + "]");}; 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse390 */
  @Test
  public void testParse390() {    // Ratkaisu: 390
    Ratkaisu ratkaisu = new Ratkaisu(); 
    ratkaisu.parse("2|00;34,224|02.11.2023|00.03"); 
    assertEquals("From: Ratkaisu line: 393", 2, ratkaisu.getId()); 
    assertEquals("From: Ratkaisu line: 394", true, ratkaisu.toString().startsWith("2|00;34,224|02.11.2023|00.03|"));  // on enemmäkin kuin 3 kenttää, siksi loppu |
    ratkaisu.rekisteroi(); 
    int n = ratkaisu.getId(); 
    ratkaisu.parse(""+(n+20));  // Otetaan merkkijonosta vain tunnusnumero
    ratkaisu.rekisteroi();  // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
    assertEquals("From: Ratkaisu line: 400", n+20+1, ratkaisu.getId()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone418 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone418() throws CloneNotSupportedException {    // Ratkaisu: 418
    Ratkaisu ratkaisu = new Ratkaisu(); 
    ratkaisu.parse("   1  |  00;34,455  "); 
    Ratkaisu kopio = ratkaisu.clone(); 
    assertEquals("From: Ratkaisu line: 423", ratkaisu.toString(), kopio.toString()); 
    ratkaisu.parse("   2  |  00;23,134  "); 
    assertEquals("From: Ratkaisu line: 425", false, kopio.toString().equals(ratkaisu.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEquals441 */
  @Test
  public void testEquals441() {    // Ratkaisu: 441
    Ratkaisu ratkaisu1 = new Ratkaisu(); 
    ratkaisu1.parse("   3  |  00;34,345   | 12.03.2023"); 
    Ratkaisu ratkaisu2 = new Ratkaisu(); 
    ratkaisu2.parse("   3  |  00;34,345   | 12.03.2023"); 
    Ratkaisu ratkaisu3 = new Ratkaisu(); 
    ratkaisu3.parse("   3  |  00;34,345   | 11.03.2023"); 
    assertEquals("From: Ratkaisu line: 449", true, ratkaisu1.equals(ratkaisu2)); 
    assertEquals("From: Ratkaisu line: 450", true, ratkaisu2.equals(ratkaisu1)); 
    assertEquals("From: Ratkaisu line: 451", false, ratkaisu1.equals(ratkaisu3)); 
    assertEquals("From: Ratkaisu line: 452", false, ratkaisu3.equals(ratkaisu2)); 
  } // Generated by ComTest END
}