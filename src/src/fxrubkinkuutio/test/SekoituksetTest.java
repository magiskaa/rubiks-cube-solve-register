package fxrubkinkuutio.test;
// Generated by ComTest BEGIN
import fxrubkinkuutio.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2024.04.29 17:37:20 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class SekoituksetTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa52 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa52() throws SailoException,CloneNotSupportedException {    // Sekoitukset: 52
    Sekoitukset sekoitukset = new Sekoitukset(); 
    Sekoitus sek1 = new Sekoitus(), sek2 = new Sekoitus(); 
    sek1.rekisteroi(); sek2.rekisteroi(); 
    assertEquals("From: Sekoitukset line: 58", 0, sekoitukset.getLkm()); 
    sekoitukset.korvaaTaiLisaa(sek1); assertEquals("From: Sekoitukset line: 59", 1, sekoitukset.getLkm()); 
    sekoitukset.korvaaTaiLisaa(sek2); assertEquals("From: Sekoitukset line: 60", 2, sekoitukset.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista94 
   * @throws SailoException when error
   */
  @Test
  public void testPoista94() throws SailoException {    // Sekoitukset: 94
    Sekoitukset sekoitukset = new Sekoitukset(); 
    Sekoitus sek1 = new Sekoitus(); sek1.testiArvot(1); 
    Sekoitus sek2 = new Sekoitus(); sek2.testiArvot(2); 
    sekoitukset.lisaa(sek1); 
    sekoitukset.lisaa(sek2); 
    assertEquals("From: Sekoitukset line: 102", true, sekoitukset.poista(sek2)); assertEquals("From: Sekoitukset line: 102", 1, sekoitukset.getLkm()); 
    List<Sekoitus> h = sekoitukset.annaSekoitukset(1); 
    assertEquals("From: Sekoitukset line: 104", 1, h.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaSekoitukset260 */
  @Test
  public void testAnnaSekoitukset260() {    // Sekoitukset: 260
    Sekoitukset sekoitukset = new Sekoitukset(); 
    Sekoitus sek1 = new Sekoitus(); sek1.rekisteroi() ; sekoitukset.lisaa(sek1); 
    Sekoitus sek2 = new Sekoitus(); sek2.rekisteroi() ; sekoitukset.lisaa(sek2); 
    Sekoitus sek3 = new Sekoitus(); sek3.rekisteroi() ; sekoitukset.lisaa(sek3); 
    Sekoitus sek4 = new Sekoitus(); sek4.rekisteroi() ; sekoitukset.lisaa(sek4); 
    List<Sekoitus> loytyneet; 
    loytyneet = sekoitukset.annaSekoitukset(1); 
    assertEquals("From: Sekoitukset line: 271", 1, loytyneet.size()); 
    assertEquals("From: Sekoitukset line: 272", true, loytyneet.get(0) == sek1); 
    loytyneet = sekoitukset.annaSekoitukset(2); 
    assertEquals("From: Sekoitukset line: 274", 1, loytyneet.size()); 
    assertEquals("From: Sekoitukset line: 275", true, loytyneet.get(0) == sek2); 
  } // Generated by ComTest END
}