package fxrubkinkuutio.test;
// Generated by ComTest BEGIN
import java.util.*;
import fxrubkinkuutio.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2024.04.29 17:37:07 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class RatkaisutTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa42 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa42() throws SailoException {    // Ratkaisut: 42
    Ratkaisut ratkaisut = new Ratkaisut(); 
    Ratkaisu rat1 = new Ratkaisu(), rat2 = new Ratkaisu(); 
    assertEquals("From: Ratkaisut line: 47", 0, ratkaisut.getLkm()); 
    ratkaisut.lisaa(rat1); assertEquals("From: Ratkaisut line: 48", 1, ratkaisut.getLkm()); 
    ratkaisut.lisaa(rat2); assertEquals("From: Ratkaisut line: 49", 2, ratkaisut.getLkm()); 
    ratkaisut.lisaa(rat1); assertEquals("From: Ratkaisut line: 50", 3, ratkaisut.getLkm()); 
    Iterator<Ratkaisu> it = ratkaisut.iterator(); 
    assertEquals("From: Ratkaisut line: 52", rat1, it.next()); 
    assertEquals("From: Ratkaisut line: 53", rat2, it.next()); 
    assertEquals("From: Ratkaisut line: 54", rat1, it.next()); 
    ratkaisut.lisaa(rat1); assertEquals("From: Ratkaisut line: 55", 4, ratkaisut.getLkm()); 
    ratkaisut.lisaa(rat1); assertEquals("From: Ratkaisut line: 56", 5, ratkaisut.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa79 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa79() throws SailoException,CloneNotSupportedException {    // Ratkaisut: 79
    Ratkaisut ratkaisut = new Ratkaisut(); 
    Ratkaisu rat1 = new Ratkaisu(), rat2 = new Ratkaisu(); 
    rat1.rekisteroi(); rat2.rekisteroi(); 
    assertEquals("From: Ratkaisut line: 85", 0, ratkaisut.getLkm()); 
    ratkaisut.korvaaTaiLisaa(rat1); assertEquals("From: Ratkaisut line: 86", 1, ratkaisut.getLkm()); 
    ratkaisut.korvaaTaiLisaa(rat2); assertEquals("From: Ratkaisut line: 87", 2, ratkaisut.getLkm()); 
    Ratkaisu rat3 = rat1.clone(); 
    rat3.setKellonaika("00.30"); 
    Iterator<Ratkaisu> it = ratkaisut.iterator(); 
    assertEquals("From: Ratkaisut line: 91", true, it.next() == rat1); 
    ratkaisut.korvaaTaiLisaa(rat3); assertEquals("From: Ratkaisut line: 92", 2, ratkaisut.getLkm()); 
    it = ratkaisut.iterator(); 
    Ratkaisu j0 = it.next(); 
    assertEquals("From: Ratkaisut line: 95", rat3, j0); 
    assertEquals("From: Ratkaisut line: 96", true, j0 == rat3); 
    assertEquals("From: Ratkaisut line: 97", false, j0 == rat1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista117 
   * @throws SailoException when error
   */
  @Test
  public void testPoista117() throws SailoException {    // Ratkaisut: 117
    Ratkaisut ratkaisut = new Ratkaisut(); 
    Ratkaisu rat1 = new Ratkaisu(), rat2 = new Ratkaisu(), rat3 = new Ratkaisu(); 
    rat1.rekisteroi(); rat2.rekisteroi(); rat3.rekisteroi(); 
    int id1 = rat1.getId(); 
    ratkaisut.lisaa(rat1); ratkaisut.lisaa(rat2); ratkaisut.lisaa(rat3); 
    assertEquals("From: Ratkaisut line: 124", 1, ratkaisut.poista(id1+1)); 
    assertEquals("From: Ratkaisut line: 125", null, ratkaisut.annaId(id1+1)); assertEquals("From: Ratkaisut line: 125", 2, ratkaisut.getLkm()); 
    assertEquals("From: Ratkaisut line: 126", 1, ratkaisut.poista(id1)); assertEquals("From: Ratkaisut line: 126", 1, ratkaisut.getLkm()); 
    assertEquals("From: Ratkaisut line: 127", 0, ratkaisut.poista(id1+3)); assertEquals("From: Ratkaisut line: 127", 1, ratkaisut.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId146 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId146() throws SailoException {    // Ratkaisut: 146
    Ratkaisut ratkaisut = new Ratkaisut(); 
    Ratkaisu rat1 = new Ratkaisu(), rat2 = new Ratkaisu(), rat3 = new Ratkaisu(); 
    rat1.rekisteroi(); rat2.rekisteroi(); rat3.rekisteroi(); 
    int id1 = rat1.getId(); 
    ratkaisut.lisaa(rat1); ratkaisut.lisaa(rat2); ratkaisut.lisaa(rat3); 
    assertEquals("From: Ratkaisut line: 153", true, ratkaisut.annaId(id1  ) == rat1); 
    assertEquals("From: Ratkaisut line: 154", true, ratkaisut.annaId(id1+1) == rat2); 
    assertEquals("From: Ratkaisut line: 155", true, ratkaisut.annaId(id1+2) == rat3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId170 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId170() throws SailoException {    // Ratkaisut: 170
    Ratkaisut ratkaisut = new Ratkaisut(); 
    Ratkaisu rat1 = new Ratkaisu(), rat2 = new Ratkaisu(), rat3 = new Ratkaisu(); 
    rat1.rekisteroi(); rat2.rekisteroi(); rat3.rekisteroi(); 
    int id1 = rat1.getId(); 
    ratkaisut.lisaa(rat1); ratkaisut.lisaa(rat2); ratkaisut.lisaa(rat3); 
    assertEquals("From: Ratkaisut line: 177", 1, ratkaisut.etsiId(id1+1)); 
    assertEquals("From: Ratkaisut line: 178", 2, ratkaisut.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi193 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi193() throws SailoException {    // Ratkaisut: 193
    Ratkaisut ratkaisut = new Ratkaisut(); 
    Ratkaisu ratkaisu1 = new Ratkaisu(); ratkaisu1.parse("1|00;43,348|03.04.2024|07.24|F|F|1"); 
    Ratkaisu ratkaisu2 = new Ratkaisu(); ratkaisu2.parse("2|00;36,345||13.01|F|F|2"); 
    Ratkaisu ratkaisu3 = new Ratkaisu(); ratkaisu3.parse("3|00;24,256|03.04.2024|21.35|F|F|3"); 
    Ratkaisu ratkaisu4 = new Ratkaisu(); ratkaisu4.parse("4|00;35,635|03.04.2024||F|T|4"); 
    Ratkaisu ratkaisu5 = new Ratkaisu(); ratkaisu5.parse("5|00;22,136|03.04.2024|18.32|T|F|5"); 
    ratkaisut.lisaa(ratkaisu1); ratkaisut.lisaa(ratkaisu2); ratkaisut.lisaa(ratkaisu3); ratkaisut.lisaa(ratkaisu4); ratkaisut.lisaa(ratkaisu5); 
    List<Ratkaisu> loytyneet; 
    loytyneet = (List<Ratkaisu>)ratkaisut.etsi("*13*"); 
    assertEquals("From: Ratkaisut line: 204", 2, loytyneet.size()); 
    assertEquals("From: Ratkaisut line: 205", true, loytyneet.get(0) == ratkaisu2); 
    assertEquals("From: Ratkaisut line: 206", true, loytyneet.get(1) == ratkaisu5); 
    loytyneet = (List<Ratkaisu>)ratkaisut.etsi("*256*"); 
    assertEquals("From: Ratkaisut line: 209", 1, loytyneet.size()); 
    assertEquals("From: Ratkaisut line: 210", true, loytyneet.get(0) == ratkaisu3); 
  } // Generated by ComTest END
}